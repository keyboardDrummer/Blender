Profiling global results:
018466ms total, 802.9ms average, for javac
008050ms total, 115.0ms average, for running phases
007114ms total, 090.0ms average, for build language
003936ms total, 178.9ms average, for Java run expected
003626ms total, 164.8ms average, for Java run actual
003565ms total, 099.0ms average, for run Implicitly prefixes references to private methods with the 'this' qualified if it is missing.
003554ms total, 042.3ms average, for build parser
003197ms total, 045.7ms average, for parse
002227ms total, 117.2ms average, for run Prints the program by generating a pretty printer from its grammar.
001583ms total, 068.8ms average, for blender compile
001340ms total, 078.8ms average, for inject trivia inside node
000756ms total, 189.1ms average, for run Decompiles the field and method signatures in a classfile.
000717ms total, 039.8ms average, for inject store trivia
000469ms total, 234.6ms average, for run Takes the bytecode program and runs it using the JVM.
000275ms total, 007.9ms average, for run Defines a skeleton for the Java class.
000210ms total, 003.4ms average, for inject inline constant pool
000117ms total, 003.2ms average, for run Removes the constant pool in favor of inline constant entries
000097ms total, 001.6ms average, for inject labelled locations
000090ms total, 002.3ms average, for run Optimizes a bytecode program by removing instructions in cases where an instructions output will always be consumed by a pop.
000078ms total, 002.1ms average, for run Replaces the jump instructions from bytecode. The new instructions are similar to the old ones except that they use labels as target instead of instruction indices.
000073ms total, 012.2ms average, for run Writes the current program as JVM class file bytes to a function.
000050ms total, 001.4ms average, for run Adds a while loop.
000045ms total, 000.5ms average, for inject byte code skeleton
000042ms total, 001.2ms average, for run Generates a stack frame for each label instruction. Stack frames can be used to determine the stack and variable types at a particular instruction.
000038ms total, 001.1ms average, for run Generates the code max stack value for code attributes which is required by the JVM.
000038ms total, 002.2ms average, for inject pretty print
000032ms total, 000.9ms average, for run Add proper C-style for-loop continue semantics.
000031ms total, 000.9ms average, for run Determines which TypeVariables are actually object types.
000031ms total, 000.9ms average, for run Enables fields to have initialisers.
000026ms total, 000.3ms average, for inject stack map table attribute
000025ms total, 000.3ms average, for inject byte code method info
000023ms total, 000.7ms average, for run Adds the break statement to the language
000023ms total, 000.3ms average, for inject type abstraction
000022ms total, 000.1ms average, for inject method type
000021ms total, 000.3ms average, for inject code attribute
000021ms total, 000.6ms average, for run Enables using the non-iterator for loop.
000019ms total, 000.5ms average, for run Enables declaring a local and initializing it in one statement.
000019ms total, 000.5ms average, for run Defines the += operator.
000018ms total, 000.5ms average, for run Moves the control flow to the start of the while loop.
000018ms total, 000.2ms average, for inject int type c
000018ms total, 000.3ms average, for inject inferred max stack
000017ms total, 000.4ms average, for inject method
000017ms total, 000.2ms average, for inject invoke dynamic constant
000016ms total, 003.1ms average, for run In the initial parsing of bytecode, the attributes are not parsed. This phase parses the attributes, but only if the attribute type is known by the compiler.
000015ms total, 000.2ms average, for inject object type
000012ms total, 000.4ms average, for run Combines instructions to reduce the instruction count. Applies mostly to custom instructions related to comparison operations, followed by a jumps.
000012ms total, 000.1ms average, for inject byte code field info
000012ms total, 000.1ms average, for inject field ref constant
000012ms total, 000.1ms average, for inject type application
000011ms total, 000.1ms average, for inject type constant