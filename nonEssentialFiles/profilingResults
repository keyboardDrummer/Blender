Profiling global results:
014236ms total, 790.9ms average, for javac
008037ms total, 134.0ms average, for running phases
006112ms total, 339.5ms average, for blender compile
003984ms total, 066.4ms average, for parse
003861ms total, 120.6ms average, for run Implicitly prefixes references to private methods with the 'this' qualified if it is missing.
003672ms total, 049.6ms average, for build language
002996ms total, 176.2ms average, for Java run expected
002641ms total, 203.1ms average, for run Prints the program by generating a pretty printer from its grammar.
002442ms total, 143.7ms average, for Java run actual
001245ms total, 077.8ms average, for inject trivia inside node
000477ms total, 119.2ms average, for inject capture trivia
000410ms total, 102.5ms average, for run Decompiles the field and method signatures in a classfile.
000354ms total, 177.2ms average, for run Takes the bytecode program and runs it using the JVM.
000300ms total, 005.5ms average, for inject remove constant pool
000231ms total, 007.5ms average, for run Defines a skeleton for the Java class.
000098ms total, 001.7ms average, for inject labelled locations
000095ms total, 015.8ms average, for run Writes the current program as JVM class file bytes to a function.
000090ms total, 001.1ms average, for inject byte code skeleton
000087ms total, 002.8ms average, for run Removes the constant pool in favor of inline constant entries
000084ms total, 002.3ms average, for run Optimizes a bytecode program by removing instructions in cases where an instructions output will always be consumed by a pop.
000048ms total, 000.6ms average, for inject short type
000046ms total, 000.7ms average, for inject store long
000037ms total, 001.2ms average, for run Generates a stack frame for each label instruction. Stack frames can be used to determine the stack and variable types at a particular instruction.
000030ms total, 001.0ms average, for run Generates the code max stack value for code attributes which is required by the JVM.
000030ms total, 003.0ms average, for inject pretty prin
000029ms total, 000.9ms average, for run Enables fields to have initialisers.
000029ms total, 000.4ms average, for inject stack map table attribute
000027ms total, 000.9ms average, for run Determines which TypeVariables are actually object types.
000025ms total, 000.3ms average, for inject byte code method info
000025ms total, 000.3ms average, for inject type abstraction
000024ms total, 000.2ms average, for inject method type
000022ms total, 000.7ms average, for run Replaces the jump instructions from bytecode. The new instructions are similar to the old ones except that they use labels as target instead of instruction indices.
000021ms total, 000.3ms average, for inject object type
000020ms total, 000.7ms average, for run Enables declaring a local and initializing it in one statement.
000020ms total, 000.3ms average, for inject load long
000020ms total, 000.4ms average, for inject method
000020ms total, 000.3ms average, for inject code attribute
000019ms total, 000.6ms average, for run Add proper C-style for-loop continue semantics.
000018ms total, 000.6ms average, for run Enables using the non-iterator for loop.
000017ms total, 000.3ms average, for inject inferred max stack
000016ms total, 000.2ms average, for inject store address
000016ms total, 000.5ms average, for run Defines the += operator.
000015ms total, 000.4ms average, for inject java class skeleton
000015ms total, 003.0ms average, for run In the initial parsing of bytecode, the attributes are not parsed. This phase parses the attributes, but only if the attribute type is known by the compiler.
000015ms total, 000.2ms average, for inject method handle constant
000014ms total, 000.2ms average, for inject duplicate instruction
000014ms total, 000.2ms average, for inject swap instruction
000012ms total, 000.3ms average, for inject greater than
000012ms total, 000.1ms average, for inject type application
000012ms total, 000.1ms average, for inject name and type constant
000012ms total, 000.2ms average, for inject compare long
000012ms total, 000.2ms average, for inject duplicate 2 instruction
000011ms total, 000.1ms average, for inject int type
000011ms total, 000.1ms average, for inject byte code field info
000011ms total, 000.4ms average, for run Combines instructions to reduce the instruction count. Applies mostly to custom instructions related to comparison operations, followed by a jumps.
000011ms total, 000.1ms average, for inject interface method ref constant
000010ms total, 000.1ms average, for inject type constant