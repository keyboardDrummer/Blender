Profiling global results:
017600ms total, 800.0ms average, for javac
007200ms total, 104.4ms average, for running phases
004014ms total, 050.8ms average, for build language
003908ms total, 177.6ms average, for Java run expected
003650ms total, 165.9ms average, for Java run actual
003343ms total, 048.5ms average, for parse
003076ms total, 087.9ms average, for run Implicitly prefixes references to private methods with the 'this' qualified if it is missing.
002337ms total, 123.0ms average, for run Prints the program by generating a pretty printer from its grammar.
001476ms total, 086.8ms average, for inject trivia inside node
001424ms total, 064.7ms average, for blender compile
000787ms total, 043.7ms average, for inject store trivia
000417ms total, 208.3ms average, for run Takes the bytecode program and runs it using the JVM.
000290ms total, 072.5ms average, for run Decompiles the field and method signatures in a classfile.
000265ms total, 007.8ms average, for run Defines a skeleton for the Java class.
000212ms total, 003.5ms average, for inject inline constant pool
000188ms total, 002.2ms average, for build parser
000118ms total, 001.9ms average, for inject labelled locations
000100ms total, 002.6ms average, for run Optimizes a bytecode program by removing instructions in cases where an instructions output will always be consumed by a pop.
000098ms total, 002.7ms average, for run Removes the constant pool in favor of inline constant entries
000094ms total, 015.6ms average, for run Writes the current program as JVM class file bytes to a function.
000075ms total, 002.1ms average, for run Replaces the jump instructions from bytecode. The new instructions are similar to the old ones except that they use labels as target instead of instruction indices.
000051ms total, 001.5ms average, for run Adds a while loop.
000049ms total, 001.4ms average, for run Adds the break statement to the language
000048ms total, 001.4ms average, for run Generates a stack frame for each label instruction. Stack frames can be used to determine the stack and variable types at a particular instruction.
000040ms total, 001.2ms average, for run Enables fields to have initialisers.
000036ms total, 000.4ms average, for inject byte code skeleton
000033ms total, 001.0ms average, for run Determines which TypeVariables are actually object types.
000033ms total, 001.9ms average, for inject pretty print
000031ms total, 000.9ms average, for run Add proper C-style for-loop continue semantics.
000031ms total, 000.9ms average, for run Enables using the non-iterator for loop.
000030ms total, 000.9ms average, for run Generates the code max stack value for code attributes which is required by the JVM.
000027ms total, 000.4ms average, for inject code attribute
000025ms total, 000.3ms average, for inject stack map table attribute
000024ms total, 000.3ms average, for inject byte code method info
000024ms total, 000.3ms average, for inject method handle constant
000021ms total, 000.6ms average, for run Moves the control flow to the start of the while loop.
000021ms total, 000.2ms average, for inject type abstraction
000017ms total, 000.5ms average, for run Defines the += operator.
000017ms total, 000.5ms average, for run Enables declaring a local and initializing it in one statement.
000017ms total, 000.4ms average, for inject method
000017ms total, 000.5ms average, for run Combines instructions to reduce the instruction count. Applies mostly to custom instructions related to comparison operations, followed by a jumps.
000017ms total, 000.1ms average, for inject method type
000016ms total, 000.3ms average, for inject inferred max stack
000013ms total, 000.2ms average, for inject object type
000013ms total, 002.6ms average, for run In the initial parsing of bytecode, the attributes are not parsed. This phase parses the attributes, but only if the attribute type is known by the compiler.
000011ms total, 000.3ms average, for run Defines a phase where custom bytecode instructions can expand into one or several actual bytecode instructions.
000011ms total, 000.1ms average, for inject byte code field info