{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Service Specific Stack",
  "Parameters": {
    "ASGHealthCheckType": {
      "Default": "EC2",
      "Type": "String"
    },
    "PreProdASGMaxCapacity": {
      "Default": "5",
      "Type": "Number"
    },
    "PreProdASGAlarmThreshold": {
      "Default": "5",
      "Type": "Number",
      "Description": "The threshold at which we alarm on the asg reaching"
    },
    "PreProdASGMinCapacity": {
      "Default": "3",
      "Type": "Number"
    },
    "PreProdHealthyHostsBehindELBThreshold": {
      "Default": "6",
      "Type": "Number"
    },
    "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg": {
      "Default": "1",
      "Type": "Number"
    },
    "ProdASGMinCapacity": {
      "Default": "7",
      "Type": "Number"
    },
    "ProdASGMaxCapacity": {
      "Default": "30",
      "Type": "Number"
    },
    "ProdMinHealthyHosts2AZ": {
      "Default": "12",
      "Type": "Number"
    },
    "ProdMinHealthyHosts3AZ": {
      "Default": "18",
      "Type": "Number"
    },
    "BastionSecurityGroupId": {
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "CPUAlarmHighThreshold": {
      "Default": "70",
      "Type": "Number"
    },
    "CPUAlarmLowThreshold": {
      "Default": "30",
      "Type": "Number"
    },
    "DefaultSubnet": {
      "AllowedValues": [
        "public",
        "private"
      ],
      "Default": "private",
      "Description": "Default subnet type, either public or private. Public means publicly-addressable IPv4, private requires a NAT for internet access. Not that is this is set to 'public', but default *all* instances will be open to the internet.",
      "Type": "String"
    },
    "DomainName": {
      "Description": "The domain name to use for the SSL certificate. Requires pre-existing whitelisting of the domain with ACM. Format is the same as used in the DNS stack, e.g. not including workspace-api",
      "Type": "String"
    },
    "FACBucketARN": {
      "Description": "The FAC bucket ARN",
      "Type": "String"
    },
    "HealthCheckPath": {
      "Default": "/ping",
      "Type": "String"
    },
    "Hostclass": {
      "Description": "Hostclass for SPIE",
      "Type": "String"
    },
    "InstanceType": {
      "Default": "m4.xlarge",
      "Type": "String"
    },
    "KeyName": {
      "ConstraintDescription": "Must be a valid existing EC2 KeyPair.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "LBExternalPort": {
      "Default": "443",
      "Type": "Number"
    },
    "LBInstancePort": {
      "Description": "The port the backend service itself listens on the EC2 instances",
      "Default": "8080",
      "Type": "Number"
    },
    "LBInstanceProtocol": {
      "Description": "The protocol to talk to the backend service (e.g. HTTP, HTTPS, etc)",
      "Default": "HTTP",
      "Type": "String"
    },
    "PipelineID": {
      "Description": "The ID of the Pipeline you're adding CodeDeploy to (find the Pipeline ID under the edit tab of your Pipeline).",
      "Type": "String"
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet3": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet3": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Stage": {
      "Default": "",
      "Type": "String"
    },
    "VPC": {
      "ConstraintDescription": "must exist",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VpcCidrBlock": {
      "Description": "CidrBlock for the IP spaaaaaace for the the VPC",
      "Type": "String"
    },
    "WorkspaceKMSDelegationRole": {
      "Description": "The role used by the workspace service on the keys account to access KMS keys",
      "Type": "String"
    },
    "KMSAccountId": {
      "Description": "The ID of the AWS account owning the service KMS key",
      "Type": "String"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMI": "ami-6236f51f",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "127311923021"
      },
      "us-east-2": {
        "AMI": "ami-4ed6e02b",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "033677994240"
      },
      "us-west-1": {
        "AMI": "ami-12031772",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "027434742980"
      },
      "us-west-2": {
        "AMI": "ami-0f168677",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "797873946194"
      },
      "ca-central-1": {
        "AMI": "ami-961790f2",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "985666609251"
      },
      "eu-west-1": {
        "AMI": "ami-5aa4ed23",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "156460612806"
      },
      "eu-west-2": {
        "AMI": "ami-cb4ea9ac",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "652711504416"
      },
      "eu-central-1": {
        "AMI": "ami-032c476c",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "054676820928"
      },
      "ap-southeast-1": {
        "AMI": "ami-1c550560",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "114774131450"
      },
      "ap-southeast-2": {
        "AMI": "ami-4f26e52d",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "783225319266"
      },
      "ap-northeast-1": {
        "AMI": "ami-57571d31",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "582318560864"
      },
      "sa-east-1": {
        "AMI": "ami-0f570263",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "507241528517"
      },
      "ap-northeast-2": {
        "AMI": "ami-808925ee",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "600734575887"
      },
      "ap-south-1": {
        "AMI": "ami-6fc99000",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "718504428378"
      }
    }
  },
  "Conditions": {
    "Prod": {
      "Fn::Equals": [
        {
          "Ref": "Stage"
        },
        "prod"
      ]
    },
    "MoreThan2AZs": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "eu-west-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "ap-southeast-2"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-east-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-east-2"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-2"
          ]
        }
      ]
    },
    "UsePublicSubnet": {
      "Fn::Equals": [
        "public",
        {
          "Ref": "DefaultSubnet"
        }
      ]
    }
  },
  "Resources": {
    "SDKMetricsRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "Prod",
      "Properties": {
        "RoleName": "sdk-cwl-export-${AWS::AccountId}",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "998293646659"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "sdk-cwl-export-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateExportTask"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:${AWS::AccountId}:log-group:AWSCloud9WorkspaceManagementService/service_log:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:DescribeExportTasks",
                    "logs:DescribeDestinations"
                  ],
                  "Resource": "arn:aws:logs:*:${AWS::AccountId}:log-group:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    "SDKMetricsBucket.Arn",
                    "arn:aws:s3:::aws-dr-metrics-cwl"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "${SDKMetricsBucket.Arn}/*",
                    "arn:aws:s3:::aws-dr-metrics-cwl/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObjectAcl"
                  ],
                  "Resource": [
                    "arn:aws:s3:::aws-dr-metrics-cwl/*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "SDKMetricsBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "Prod",
      "Properties": {
        "AccessControl": "Private",
        "BucketName": "cloud9-sdk-cwl-export-logs-${AWS::Region}"
      }
    },
    "SDKMetricsBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "Prod",
      "Properties": {
        "Bucket": "SDKMetricsBucket",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "logs.${AWS::Region}.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": "SDKMetricsBucket.Arn"
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "logs.${AWS::Region}.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": "${SDKMetricsBucket.Arn}/*",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "ArtifactEncryptionKey": {
      "Properties": {
        "Description": "For server side artifact encryption",
        "EnableKeyRotation": "true",
        "Enabled": "true",
        "KeyPolicy": {
          "Id": "key-default-1",
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*",
              "Sid": "Enable IAM User Permissions"
            },
            {
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*",
              "Sid": "Allow access for Key Administrators"
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "PipelinesBATSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "PipelinesBARSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "InstanceRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Resource": "*",
              "Sid": "Allow use of the key"
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RevokeGrant"
              ],
              "Condition": {
                "Bool": {
                  "kms:GrantIsForAWSResource": "true"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "PipelinesBATSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "PipelinesBARSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "InstanceRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Resource": "*",
              "Sid": "Allow attachment of persistent resources"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::KMS::Key"
    },
    "AutoScalingGroupOneBox": {
      "Condition": "Prod",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Used for onebox deploys"
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "0"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": 1,
        "MinSize": 1,
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group OneBox"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet1"
              },
              {
                "Ref": "PrivateSubnet1"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 1,
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "AutoScalingGroup1": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Scaling policies will be set a later date."
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "0"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMaxCapacity"
            },
            {
              "Ref": "PreProdASGMaxCapacity"
            }
          ]
        },
        "MinSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMinCapacity"
            },
            {
              "Ref": "PreProdASGMinCapacity"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group 1"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "false"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet1"
              },
              {
                "Ref": "PrivateSubnet1"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": {
            "Fn::If": [
              "Prod",
              {
                "Fn::FindInMap": [
                  "RegionMap",
                  {
                    "Ref": "AWS::Region"
                  },
                  "AutoScalingRollingUpdateMaxBatchSizePerAsg"
                ]
              },
              {
                "Ref": "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg"
              }
            ]
          },
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "AutoScalingGroup2": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Scaling policies will be set a later date."
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "1"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMaxCapacity"
            },
            {
              "Ref": "PreProdASGMaxCapacity"
            }
          ]
        },
        "MinSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMinCapacity"
            },
            {
              "Ref": "PreProdASGMinCapacity"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group 2"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "false"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet2"
              },
              {
                "Ref": "PrivateSubnet2"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": {
            "Fn::If": [
              "Prod",
              {
                "Fn::FindInMap": [
                  "RegionMap",
                  {
                    "Ref": "AWS::Region"
                  },
                  "AutoScalingRollingUpdateMaxBatchSizePerAsg"
                ]
              },
              {
                "Ref": "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg"
              }
            ]
          },
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "AutoScalingGroup3": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Condition": "MoreThan2AZs",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Scaling policies will be set a later date."
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "2"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMaxCapacity"
            },
            {
              "Ref": "PreProdASGMaxCapacity"
            }
          ]
        },
        "MinSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMinCapacity"
            },
            {
              "Ref": "PreProdASGMinCapacity"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group 3"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "false"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet3"
              },
              {
                "Ref": "PrivateSubnet3"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": {
            "Fn::If": [
              "Prod",
              {
                "Fn::FindInMap": [
                  "RegionMap",
                  {
                    "Ref": "AWS::Region"
                  },
                  "AutoScalingRollingUpdateMaxBatchSizePerAsg"
                ]
              },
              {
                "Ref": "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg"
              }
            ]
          },
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "CPUHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM CPU High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "CPUUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "80",
        "AlarmDescription": "Alarm if CPU too high on any EC2 instance",
        "Period": "60",
        "Namespace": "AWS/EC2"
      }
    },
    "MemoryUsageHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Memory Usage High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "MemoryUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "80",
        "AlarmDescription": "Alarm if memory usage is too high on any EC2 instance",
        "Period": "60",
        "Namespace": "System/Linux"
      }
    },
    "DiskSpaceUsageHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Space Usage High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "DiskSpaceUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "70",
        "AlarmDescription": "Alarm if disk space usage is high on any EC2 instance, but before it's critical",
        "Period": "60",
        "Namespace": "System/Linux",
        "Dimensions": [
          {
            "Name": "Filesystem",
            "Value": "/dev/xvda1"
          },
          {
            "Name": "MountPath",
            "Value": "/"
          }
        ]
      }
    },
    "DiskSpaceUsageHighTrendAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Space Usage High Trend",
        "EvaluationPeriods": "10",
        "Statistic": "Average",
        "MetricName": "DiskSpaceUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "50",
        "AlarmDescription": "Alarm if disk space usage is going up on all EC2 instances",
        "Period": "60",
        "Namespace": "System/Linux",
        "Dimensions": [
          {
            "Name": "Filesystem",
            "Value": "/dev/xvda1"
          },
          {
            "Name": "MountPath",
            "Value": "/"
          }
        ]
      }
    },
    "DiskOperationsHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Operations High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "disk.disk_ops",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "800000",
        "AlarmDescription": "Alarm if disk operations usage is high on any EC2 instance",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "PluginInstance",
            "Value": "xvda1"
          },
          {
            "Name": "FixedDimension",
            "Value": "ALL"
          }
        ]
      }
    },
    "DiskInodesUsageHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Inodes Usage High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "df.percent_inodes.used",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "50",
        "AlarmDescription": "Alarm if disk inodes usage is high on any EC2 instance",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "PluginInstance",
            "Value": "xvda1"
          },
          {
            "Name": "FixedDimension",
            "Value": "ALL"
          }
        ]
      }
    },
    "NumberOfProcessesHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Number Of Processes High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "processes.ps_state.sleeping",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "420",
        "AlarmDescription": "Alarm if there is a high number of processes on any EC2 instance",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "PluginInstance",
            "Value": "NONE"
          },
          {
            "Name": "FixedDimension",
            "Value": "ALL"
          }
        ]
      }
    },
    "AutoScalingGroup1LimitsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Number of instances in ASG 1 is approaching the scaling maximum",
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "MetricName": "GroupTotalInstances",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Threshold": {
          "Fn::If": [
            "Prod",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "ASGAlarmThreshold"
              ]
            },
            {
              "Ref": "PreProdASGAlarmThreshold"
            }
          ]
        },
        "AlarmDescription": "Alarm if the number of instances in ASG 1 is approaching the scaling maximum",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AutoScalingGroup1"
          }
        ]
      }
    },
    "AutoScalingGroup2LimitsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Number of instances in ASG 2 is approaching the scaling maximum",
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "MetricName": "GroupTotalInstances",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Threshold": {
          "Fn::If": [
            "Prod",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "ASGAlarmThreshold"
              ]
            },
            {
              "Ref": "PreProdASGAlarmThreshold"
            }
          ]
        },
        "AlarmDescription": "Alarm if the number of instances in ASG 2 is approaching the scaling maximum",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AutoScalingGroup2"
          }
        ]
      }
    },
    "AutoScalingGroup3LimitsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "MoreThan2AZs",
      "Properties": {
        "AlarmName": "C9ALARM Number of instances in ASG 3 is approaching the scaling maximum",
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "MetricName": "GroupTotalInstances",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Threshold": {
          "Fn::If": [
            "Prod",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "ASGAlarmThreshold"
              ]
            },
            {
              "Ref": "PreProdASGAlarmThreshold"
            }
          ]
        },
        "AlarmDescription": "Alarm if the number of instances in ASG 3 is approaching the scaling maximum",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AutoScalingGroup3"
          }
        ]
      }
    },
    "BATSLogGroup": {
      "Properties": {
        "RetentionInDays": 7
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "CPUAlarmHigh1": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy1"
          }
        ],
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup1"
            }
          }
        ],
        "EvaluationPeriods": "1",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "CPUAlarmHighThreshold"
        }
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CPUAlarmHigh2": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy2"
          }
        ],
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup2"
            }
          }
        ],
        "EvaluationPeriods": "1",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "CPUAlarmHighThreshold"
        }
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CPUAlarmHigh3": {
      "Condition": "MoreThan2AZs",
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy3"
          }
        ],
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup3"
            }
          }
        ],
        "EvaluationPeriods": "1",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "CPUAlarmHighThreshold"
        }
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "HealthyHostsBehindELBAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Healthy Hosts Behind ELB",
        "EvaluationPeriods": "1",
        "Statistic": "Minimum",
        "MetricName": "HealthyHostCount",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": {
          "Fn::If": [
            "Prod",
            {
              "Fn::If": [
                "MoreThan2AZs",
                {
                  "Ref": "ProdMinHealthyHosts3AZ"
                },
                {
                  "Ref": "ProdMinHealthyHosts2AZ"
                }
              ]
            },
            {
              "Ref": "PreProdHealthyHostsBehindELBThreshold"
            }
          ]
        },
        "AlarmDescription": "Alarm if the total healthy hosts behind the ELB is too low",
        "Period": "60",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          },
          {
            "Name": "TargetGroup",
            "Value": {
              "Fn::GetAtt": [
                "ELBTargetGroup",
                "TargetGroupFullName"
              ]
            }
          }
        ],
        "Unit": "Count"
      }
    },
    "ELBTargetResponseTimeAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM ELB Target Response Time",
        "EvaluationPeriods": "5",
        "Statistic": "Maximum",
        "MetricName": "TargetResponseTime",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 100,
        "AlarmDescription": "Alarm if the target response time is high",
        "Period": "60",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          },
          {
            "Name": "TargetGroup",
            "Value": {
              "Fn::GetAtt": [
                "ELBTargetGroup",
                "TargetGroupFullName"
              ]
            }
          }
        ],
        "Unit": "Milliseconds"
      }
    },
    "ELBHTTPCodeTarget3XXCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM ELB HTTP Code Target 3xx Count",
        "EvaluationPeriods": "3",
        "Statistic": "Sum",
        "MetricName": "HTTPCode_Target_3XX_Count",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 60,
        "AlarmDescription": "Alarm if the number of 3XX responses is high from the service",
        "Period": "60",
        "TreatMissingData": "notBreaching",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          },
          {
            "Name": "TargetGroup",
            "Value": {
              "Fn::GetAtt": [
                "ELBTargetGroup",
                "TargetGroupFullName"
              ]
            }
          }
        ],
        "Unit": "Count"
      }
    },
    "ELBHTTPCodeTarget4XXCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM ELB HTTP Code Target 4xx Count",
        "EvaluationPeriods": "3",
        "Statistic": "Sum",
        "MetricName": "HTTPCode_Target_4XX_Count",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 200,
        "AlarmDescription": "Alarm if the number of 4XX responses is high from the service",
        "Period": "60",
        "TreatMissingData": "notBreaching",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          },
          {
            "Name": "TargetGroup",
            "Value": {
              "Fn::GetAtt": [
                "ELBTargetGroup",
                "TargetGroupFullName"
              ]
            }
          }
        ],
        "Unit": "Count"
      }
    },
    "ELBHTTPCodeTarget5XXWarning": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM ELB HTTP Code Target 5xx Warning",
        "EvaluationPeriods": "3",
        "Statistic": "Sum",
        "MetricName": "HTTPCode_Target_5XX_Count",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 5,
        "AlarmDescription": "Alarm if there are any 5XX responses from the service",
        "Period": "60",
        "TreatMissingData": "notBreaching",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          },
          {
            "Name": "TargetGroup",
            "Value": {
              "Fn::GetAtt": [
                "ELBTargetGroup",
                "TargetGroupFullName"
              ]
            }
          }
        ],
        "Unit": "Count"
      }
    },
    "ELBHTTPCodeTarget5XXAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM ELB HTTP Code Target 5xx",
        "EvaluationPeriods": "3",
        "Statistic": "Sum",
        "MetricName": "HTTPCode_Target_5XX_Count",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 10,
        "AlarmDescription": "Alarm if there are any 5XX responses from the service",
        "Period": "60",
        "TreatMissingData": "notBreaching",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          },
          {
            "Name": "TargetGroup",
            "Value": {
              "Fn::GetAtt": [
                "ELBTargetGroup",
                "TargetGroupFullName"
              ]
            }
          }
        ],
        "Unit": "Count"
      }
    },
    "ELBHTTPCode5XXCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM ELB HTTP Code 5xx Count",
        "EvaluationPeriods": "1",
        "Statistic": "Sum",
        "MetricName": "HTTPCode_ELB_5XX_Count",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "AlarmDescription": "Alarm if there are any 5XX responses from the ELB itself",
        "Period": "60",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          }
        ],
        "Unit": "Count"
      }
    },
    "ELBHTTPCode4XXCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM ELB HTTP Code 4xx Count",
        "EvaluationPeriods": "1",
        "Statistic": "Sum",
        "MetricName": "HTTPCode_ELB_4XX_Count",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 200,
        "AlarmDescription": "Alarm if the number of 4XX responses is high from the ELB itself",
        "Period": "60",
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": {
              "Fn::GetAtt": [
                "ELB",
                "LoadBalancerFullName"
              ]
            }
          }
        ],
        "Unit": "Count"
      }
    },
    "ProcessManagerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "AWSCloud9WorkspaceManagementService/processmanager.log"
      }
    },
    "ProcessExitedInRunningStateMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterPattern": "\"received exit notification\" \"state (2)\"",
        "LogGroupName": {
          "Ref": "ProcessManagerLogGroup"
        },
        "MetricTransformations": [
          {
            "MetricValue": 1,
            "MetricNamespace": "AWSCloud9WorkspaceManagementService",
            "MetricName": "ProcessExitedInRunningState"
          }
        ]
      }
    },
    "ProcessExitedInRunningStateAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Process Exited In Running State",
        "AlarmDescription": "Service process (node.js) managed by processmanager died unexpectedly",
        "Namespace": "AWSCloud9WorkspaceManagementService",
        "Statistic": "Sum",
        "MetricName": "ProcessExitedInRunningState",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "Period": 60,
        "EvaluationPeriods": 1,
        "TreatMissingData": "notBreaching"
      }
    },
    "MultipleProcessesExitedInRunningStateAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Multiple Processes Exited In Running State",
        "AlarmDescription": "Multiple instances of a service process (node.js) managed by processmanager died unexpectedly",
        "Namespace": "AWSCloud9WorkspaceManagementService",
        "Statistic": "Sum",
        "MetricName": "ProcessExitedInRunningState",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 3,
        "TreatMissingData": "notBreaching",
        "Period": 60,
        "EvaluationPeriods": 2
      }
    },
    "MissingCloudWatchApplicationLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchApplicationLogsAlarm",
        "AlarmDescription": "Cloudwatch application logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/application.log"
          }
        ]
      }
    },
    "MissingCloudWatchCoralApplicationLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchCoralApplicationLogsAlarm",
        "AlarmDescription": "Cloudwatch application logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/coral_application.log"
          }
        ]
      }
    },
    "MissingCloudWatchServiceLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchServiceLogsAlarm",
        "AlarmDescription": "Cloudwatch service logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/service_log"
          }
        ]
      }
    },
    "MissingCloudWatchCoralServiceLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchCoralServiceLogsAlarm",
        "AlarmDescription": "Cloudwatch service logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/coral_service_log"
          }
        ]
      }
    },
    "CodeDeployApp": {
      "Type": "AWS::CodeDeploy::Application"
    },
    "CodeDeployRole": {
      "Metadata": {
        "Comment": "Role used by CodeDeploy to actually deploy software"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "codedeploy.",
                        {
                          "Ref": "AWS::Region"
                        },
                        ".amazonaws.com"
                      ]
                    ]
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/codeDeployRole/"
      },
      "Type": "AWS::IAM::Role"
    },
    "CodeDeployRolePolicies": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat",
                "cloudwatch:DescribeAlarms",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceStatus",
                "tag:GetTags",
                "tag:GetResources",
                "sns:Publish"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CodeDeployPolicy",
        "Roles": [
          {
            "Ref": "CodeDeployRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "DeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "LoggingConfiguration": {
          "LogFilePrefix": "logs/"
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 548,
              "Prefix": "logs/",
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "OneBoxDeploymentGroup": {
      "Condition": "Prod",
      "DependsOn": [
        "CodeDeployRole",
        "CodeDeployRolePolicies"
      ],
      "Properties": {
        "ApplicationName": "CodeDeployApp",
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "AlarmConfiguration": {
          "Enabled": false
        },
        "AutoScalingGroups": [
          {
            "Ref": "AutoScalingGroupOneBox"
          }
        ],
        "ServiceRoleArn": "CodeDeployRole.Arn"
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "DeploymentGroup1": {
      "DependsOn": [
        "CodeDeployRole",
        "CodeDeployRolePolicies"
      ],
      "Properties": {
        "ApplicationName": "CodeDeployApp",
        "DeploymentConfigName": "25PercentAtOnceDeploymentConfig",
        "AlarmConfiguration": {
          "Enabled": false
        },
        "AutoScalingGroups": [
          {
            "Ref": "AutoScalingGroup1"
          }
        ],
        "ServiceRoleArn": "CodeDeployRole.Arn"
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "DeploymentGroup2": {
      "DependsOn": [
        "CodeDeployRole",
        "CodeDeployRolePolicies"
      ],
      "Properties": {
        "ApplicationName": "CodeDeployApp",
        "DeploymentConfigName": "25PercentAtOnceDeploymentConfig",
        "AlarmConfiguration": {
          "Enabled": false
        },
        "AutoScalingGroups": [
          {
            "Ref": "AutoScalingGroup2"
          }
        ],
        "ServiceRoleArn": "CodeDeployRole.Arn"
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "DeploymentGroup3": {
      "Condition": "MoreThan2AZs",
      "DependsOn": [
        "CodeDeployRole",
        "CodeDeployRolePolicies"
      ],
      "Properties": {
        "ApplicationName": "CodeDeployApp",
        "DeploymentConfigName": "25PercentAtOnceDeploymentConfig",
        "AlarmConfiguration": {
          "Enabled": false
        },
        "AutoScalingGroups": [
          {
            "Ref": "AutoScalingGroup3"
          }
        ],
        "ServiceRoleArn": "CodeDeployRole.Arn"
      },
      "Type": "AWS::CodeDeploy::DeploymentGroup"
    },
    "25PercentAtOnceDeploymentConfig": {
      "Type": "AWS::CodeDeploy::DeploymentConfig",
      "Properties": {
        "MinimumHealthyHosts": {
          "Type": "FLEET_PERCENT",
          "Value": 75
        }
      }
    },
    "SslCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Fn::Join": [
            ".",
            [
              "workspace-api",
              {
                "Ref": "DomainName"
              }
            ]
          ]
        }
      }
    },
    "WMSELBCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": "DomainName"
      }
    },
    "ELBLogBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "LoggingConfiguration": {
          "LogFilePrefix": "logs/"
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 548,
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "ELBLogBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": "ELBLogBucket",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": 1,
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::${ELBLogBucket}/WMSELBLogs/*"
              ],
              "Principal": {
                "AWS": [
                  {
                    "Fn::FindInMap": [
                      "RegionMap",
                      {
                        "Ref": "AWS::Region"
                      },
                      "ELBLogAccount"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "ELB": {
      "Metadata": {
        "Comment": "ELB set up across available AZs. Listener currently set to port 80 and an instance port of 8080."
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DependsOn": [
        "ELBLogBucketPolicy"
      ],
      "Properties": {
        "Name": "WMSELB",
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          },
          {
            "Ref": "ELBOpenToRoute53HealthCheckerSecurityGroup"
          },
          {
            "Fn::If": [
              "Prod",
              {
                "Ref": "ELBOpenToWorldSecurityGroup"
              },
              {
                "Fn::ImportValue": "AllowFromVPNSecurityGroupId"
              }
            ]
          }
        ],
        "LoadBalancerAttributes": [
          {
            "Key": "access_logs.s3.enabled",
            "Value": "true"
          },
          {
            "Key": "access_logs.s3.prefix",
            "Value": "WMSELBLogs"
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": "ELBLogBucket"
          },
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": 60
          }
        ],
        "Subnets": {
          "Fn::If": [
            "MoreThan2AZs",
            [
              {
                "Ref": "PublicSubnet1"
              },
              {
                "Ref": "PublicSubnet2"
              },
              {
                "Ref": "PublicSubnet3"
              }
            ],
            [
              {
                "Ref": "PublicSubnet1"
              },
              {
                "Ref": "PublicSubnet2"
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB"
                ]
              ]
            }
          }
        ]
      }
    },
    "ELBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "ELB"
        },
        "Port": {
          "Ref": "LBExternalPort"
        },
        "Protocol": "HTTPS",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "WMSELBCertificate"
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ELBTargetGroup"
            }
          }
        ]
      }
    },
    "ELBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "WMSTG",
        "VpcId": "VPC",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": 60
          }
        ],
        "Port": "LBInstancePort",
        "Protocol": "LBInstanceProtocol",
        "HealthCheckPath": "HealthCheckPath",
        "HealthCheckTimeoutSeconds": 2,
        "HealthCheckIntervalSeconds": 5,
        "HealthyThresholdCount": 3,
        "UnhealthyThresholdCount": 2
      }
    },
    "ELBOpenToWorldSecurityGroup": {
      "Metadata": {
        "Comment": ""
      },
      "Properties": {
        "GroupDescription": "Allow inbound port HTTP, outbound to Invoke fleet",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB Open to World Security Group"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ELBOpenToRoute53HealthCheckerSecurityGroup": {
      "Metadata": {
        "Comment": "Route53 HealthChecker boxes, these are not supposed to change, see Route53s GetCheckerIpRanges API"
      },
      "Properties": {
        "GroupDescription": "Allow inbound port HTTP, outbound to Invoke fleet",
        "SecurityGroupIngress": [
          {
            "CidrIp": "54.183.255.128/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.228.16.0/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.232.40.64/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.241.32.64/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.243.31.192/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.244.52.192/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.245.168.0/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.248.220.0/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.250.253.192/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.251.31.128/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.252.79.128/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.252.254.192/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "54.255.254.192/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "107.23.255.0/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "176.34.159.192/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          },
          {
            "CidrIp": "177.71.207.128/26",
            "FromPort": {
              "Ref": "LBExternalPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "LBExternalPort"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB Open To Route53 HealthChecker Security Group"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ELBSecurityGroup": {
      "Metadata": {
        "Comment": ""
      },
      "Properties": {
        "GroupDescription": "Allow inbound port HTTP, outbound to Invoke fleet",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "41"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB Security Group"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ELBSecurityGroupHttpEgressHTTP": {
      "Metadata": {
        "Comment": "Add as explicit rule to allow circular dependences"
      },
      "Properties": {
        "DestinationSecurityGroupId": {
          "Ref": "InvokerSecurityGroup"
        },
        "FromPort": {
          "Ref": "LBInstancePort"
        },
        "GroupId": {
          "Ref": "ELBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": {
          "Ref": "LBInstancePort"
        }
      },
      "Type": "AWS::EC2::SecurityGroupEgress"
    },
    "ELBDashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": "WMS-ApplicationELB-Dashboard",
        "DashboardBody": {
          "Fn::Sub": [
            "{\n     \"widgets\": [\n        {\n           \"type\": \"metric\",\n           \"properties\":{\n             \"metrics\":[\n               [\"AWS/ApplicationELB\", \"HealthyHostCount\", \"TargetGroup\", \"${ELBTargetGroup.TargetGroupFullName}\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"],\n               [\"AWS/ApplicationELB\", \"UnHealthyHostCount\", \"TargetGroup\", \"${ELBTargetGroup.TargetGroupFullName}\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"]\n             ],\n             \"region\": \"${AWS::Region}\",\n             \"stat\": \"Average\",\n             \"title\": \"Host Health\"\n            }\n        },\n        {\n           \"type\": \"metric\",\n           \"properties\":{\n             \"metrics\":[\n               [\"AWS/ApplicationELB\", \"HTTPCode_Target_2XX_Count\", \"TargetGroup\", \"${ELBTargetGroup.TargetGroupFullName}\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"],\n               [\"AWS/ApplicationELB\", \"HTTPCode_Target_4XX_Count\", \"TargetGroup\", \"${ELBTargetGroup.TargetGroupFullName}\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"],\n               [\"AWS/ApplicationELB\", \"HTTPCode_Target_5XX_Count\", \"TargetGroup\", \"${ELBTargetGroup.TargetGroupFullName}\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"]\n             ],\n             \"region\": \"${AWS::Region}\",\n             \"stat\": \"Sum\",\n             \"title\": \"Service response codes\"\n           }\n        },\n        {\n           \"type\": \"metric\",\n           \"properties\":{\n             \"metrics\":[\n                 [\"AWS/ApplicationELB\", \"HTTPCode_ELB_4XX_Count\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"],\n                 [\"AWS/ApplicationELB\", \"HTTPCode_ELB_5XX_Count\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"]\n             ],\n             \"region\": \"${AWS::Region}\",\n             \"stat\": \"Sum\",\n             \"title\": \"ELB originated response codes\"\n           }\n        },\n        {\n           \"type\": \"metric\",\n           \"properties\":{\n             \"metrics\":[\n               [\"AWS/ApplicationELB\", \"RequestCount\", \"TargetGroup\", \"${ELBTargetGroup.TargetGroupFullName}\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\", {\"stat\": \"Sum\"}]\n             ],\n             \"region\": \"${AWS::Region}\",\n             \"stat\": \"Sum\",\n             \"title\": \"RequestCount\"\n           }\n        },\n        {\n           \"type\": \"metric\",\n           \"properties\":{\n             \"metrics\":[\n               [\"AWS/ApplicationELB\", \"TargetResponseTime\", \"TargetGroup\", \"${ELBTargetGroup.TargetGroupFullName}\", \"LoadBalancer\", \"${ELB.LoadBalancerFullName}\"]\n             ],\n             \"region\": \"${AWS::Region}\",\n             \"stat\": \"p99\",\n             \"title\": \"TargetResponseTime\"\n            }\n        }\n     ]\n}\n",
            {
            }
          ]
        }
      }
    },
    "InstanceRole": {
      "Metadata": {
        "Comment": "Role used by the instances in the Invoker fleet"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/executionServiceEC2Role/",
        "ManagedPolicyArns": [
          "arn:aws:iam::${AWS::AccountId}:policy/WMSDynamoDBPolicy",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "InstanceRoleARSPolicy": {
      "Metadata": {
        "Comment": "Allow the instance to access ARS"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ars:requestFAS",
                "ars:cryptoOffload",
                "ars:GetPolicies",
                "ars:Authenticate",
                "ars:GetPrincipal"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ARS",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRoleSTSPolicy": {
      "Metadata": {
        "Comment": "Allow the instance to access STS"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:GetSessionTokenWithRemappedContext"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "STS",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRoleSlrPrePolicy": {
      "Metadata": {
        "Comment": "Allow the instance in pre-prod to use the prod service principal to assume the SLR"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:iam::771323980514:role/InternalSlrDelegationRole"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "SLR",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRoleFACPolicy": {
      "Metadata": {
        "Comment": "Allow the instance to access FAC"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:ListBucket",
                "s3:GetObject",
                "s3:GetObjectAcl"
              ],
              "Effect": "Allow",
              "Resource": [
                "FACBucketARN",
                "${FACBucketARN}/*"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "FAC",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRoleKMSPolicy": {
      "Metadata": {
        "Comment": "Allow the instance to access KMS service keys"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "kms:*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:kms:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "KMSAccountId"
                      },
                      "key/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KMS",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRoleKMSDelegation": {
      "Metadata": {
        "Comment": "Allow access to the delegation roles for KMS access"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "WorkspaceKMSDelegationRole"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KMSDelegation",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRoleDynamoDelegation": {
      "Metadata": {
        "Comment": "Allow access to the delegation role for DynamoDB access"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/workspace_dynamo_delegation"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DynamoDelegation",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRoleCWLPutMetricPolicy": {
      "Metadata": {
        "Comment": "Allow the instance to put metrics into CW"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CWLPutPolicy",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InstanceRolePolicies": {
      "Metadata": {
        "Comment": "Allow the instance to get RPM from S3 and write logs to timber"
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:ListBucket"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":role/singlepass-sync-reader"
                  ]
                ]
              }
            },
            {
              "Action": [
                "autoscaling:Describe*",
                "autoscaling:EnterStandby",
                "autoscaling:ExitStandby",
                "autoscaling:UpdateAutoScalingGroup",
                "cloudwatch:PutMetricDataBatch",
                "cloudwatch:PutMetricData",
                "cloudformation:Describe*",
                "cloudformation:ListExports",
                "ec2:DescribeInstances",
                "ec2:DescribeTags",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "sts:AssumeRole",
                "timber:PutLog",
                "timber:PutLogGroup",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AWSPolicy",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "InvokerSecurityGroup": {
      "Metadata": {
        "Comment": "Allow SSH from Bastion, 80/443 from ELB, outbound HTTP(s) to anywhere, all ports within"
      },
      "Properties": {
        "GroupDescription": "Allow HTTP(S) out and HTTP from ELB and SSH from bastion, internal ports within the security group as configured",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535",
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": {
              "Ref": "VpcCidrBlock"
            },
            "FromPort": "0",
            "IpProtocol": "udp",
            "ToPort": "65535"
          },
          {
            "CidrIp": {
              "Ref": "VpcCidrBlock"
            },
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "123",
            "IpProtocol": "udp",
            "ToPort": "123"
          }
        ],
        "SecurityGroupIngress": [
          {
            "FromPort": {
              "Ref": "LBInstancePort"
            },
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "ELBSecurityGroup",
                "GroupId"
              ]
            },
            "ToPort": {
              "Ref": "LBInstancePort"
            }
          },
          {
            "FromPort": "22",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroupId"
            },
            "ToPort": "22"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Service Security Group"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "InvokerSecurityGroupInternalEgress": {
      "Properties": {
        "DestinationSecurityGroupId": {
          "Ref": "InvokerSecurityGroup"
        },
        "FromPort": "0",
        "GroupId": {
          "Ref": "InvokerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupEgress"
    },
    "InvokerSecurityGroupInternalIngress": {
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "InvokerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "InvokerSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "LaunchConfiguration": {
      "DependsOn": [
        "InstanceRole"
      ],
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "chmodCronScripts": {
                "command": "chmod +x /opt/cwlMonScripts/aws-scripts-mon/*.pl"
              },
              "sethostprompt": {
                "command": "sed -i 's#\\\\h#$NICKNAME#g' /etc/bashrc"
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n",
                "group": "root",
                "mode": "000444",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}\nrunas=root\n"
              },
              "/etc/cron.d/cloudwatchMetrics": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "* * * * * ec2-user /opt/cwlMonScripts/aws-scripts-mon/mon-put-instance-data.pl --mem-util --disk-space-util --disk-path=/ --disk-path=/apollo --disk-path=/opt/codedeploy-agent --auto-scaling --aggregated --from-cron\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "root"
              },
              "/etc/profile.d/prompt.sh": {
                "content": "export NICKNAME=${AWS::StackName}\n"
              }
            },
            "packages": {
              "yum": {
                "compat-libcap1": [

                ],
                "perl-DateTime": [

                ],
                "perl-LWP-Protocol-https": [

                ],
                "perl-Sys-Syslog": [

                ],
                "zsh": [

                ]
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "sources": {
              "/opt/cwlMonScripts": "http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip"
            }
          }
        },
        "Comment": "Setup cloudformation hooks for template updates and auto reloading. All other env initialization will occur in the codedeploy startup script."
      },
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "UsePublicSubnet",
            "true",
            "false"
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": 150,
              "VolumeType": "gp2"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "RoleInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "InvokerSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Sub": "#!/bin/bash -xue\nyum upgrade -y aws-cli\nyum update -y aws-cfn-bootstrap\nyum update -y singlepass-ec2-client\nyum update -y singlepass-ec2-client-config\nid=$(curl --silent --show-error --retry 3 http://169.254.169.254/latest/meta-data/instance-id)\nasg=$(aws autoscaling describe-auto-scaling-instances --region ${AWS::Region} --instance-ids=\"$id\" --query \"AutoScalingInstances[0].AutoScalingGroupName\" --output text)\nlogical_resource=$(aws cloudformation describe-stack-resources --region ${AWS::Region} --physical-resource-id \"$asg\" --query \"StackResources[?PhysicalResourceId==\\`$asg\\`].LogicalResourceId\" --output text)\nfunction error_exit\n{\n  /opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack '${AWS::StackName}' --reason \"$1\" --resource \"$logical_resource\"\n  exit 1\n}\ntrap error_exit ERR\n/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack '${AWS::StackName}' --resource LaunchConfiguration  || error_exit \"Failed to run cfn-init\"\n/opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource \"$logical_resource\" --region ${AWS::Region}\n"
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "PipelinesBARSManagedPolicy": {
      "Properties": {
        "Description": "Policy for BARS to replicate S3 artifacts into and out of this region",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "PipelinesBARSRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "bars.amazon.com:entity": {
                    "Ref": "PipelineID"
                  },
                  "bars.amazon.com:service": "CDService",
                  "bars.amazon.com:type": "Pipeline"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "bars.amazon.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Ref": "PipelinesBARSManagedPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "PipelinesBATSManagedPolicy": {
      "Properties": {
        "Description": "Policy for BATS to create and get artifacts in your S3 bucket as well as publish logs to CloudWatchLogs.",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:Describe*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:Get*",
                "logs:List*",
                "logs:Describe*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:*:log-stream:*"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "PipelinesBATSRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "bats.amazon.com:entity": {
                    "Ref": "PipelineID"
                  },
                  "bats.amazon.com:service": "CDService",
                  "bats.amazon.com:type": "Pipeline"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "bats.amazon.com"
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "bars.amazon.com:entity": {
                    "Ref": "PipelineID"
                  },
                  "bars.amazon.com:service": "CDService",
                  "bars.amazon.com:type": "Pipeline"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "bars.amazon.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Ref": "PipelinesBATSManagedPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "PipelinesCDBatsReadArtifactsPolicy": {
      "Properties": {
        "Description": "Policy for Pipelines to read BATS S3 artifact metadata",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "PipelinesCDBatsReadArtifactsRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "PipelineID"
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "pipelines.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Ref": "PipelinesCDBatsReadArtifactsPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "PipelinesCodeDeployManagedPolicy": {
      "Properties": {
        "Description": "Policy for Pipelines to manage Code Deploy, CWE rules + read S3 artifacts",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "codedeploy:*",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "events:*",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "CloudWatchEventsRuleAndTargetCreation"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::ManagedPolicy"
    },
    "PipelinesCodeDeployRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "PipelineID"
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "pipelines.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Ref": "PipelinesCodeDeployManagedPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "CloudWatchDashboardsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "CloudWatchDashboards",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::015580085211:user/dashboards"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ReadCloudWatchDashboard",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1394386573000",
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:GetMetricData",
                    "cloudwatch:DescribeAlarms"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "RoleInstanceProfile": {
      "Properties": {
        "Path": "/executionServiceEC2Role/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "ScaleUpPolicy1": {
      "Metadata": {
        "Comment": "Scale up by one instance when threshold is reached"
      },
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup1"
        },
        "Cooldown": "120",
        "ScalingAdjustment": "1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ScaleUpPolicy2": {
      "Metadata": {
        "Comment": "Scale up by one instance when threshold is reached"
      },
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup2"
        },
        "Cooldown": "120",
        "ScalingAdjustment": "1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "ScaleUpPolicy3": {
      "Condition": "MoreThan2AZs",
      "Metadata": {
        "Comment": "Scale up by one instance when threshold is reached"
      },
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup3"
        },
        "Cooldown": "120",
        "ScalingAdjustment": "1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "GetAZFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import boto3",
                "import botocore",
                "import json",
                "import logging",
                "import cfnresponse",
                "client = boto3.client('cloudformation')",
                "s3 = boto3.resource('s3')",
                "logging.basicConfig(level=logging.INFO)",
                "log = logging.getLogger()",
                "def get_available_zones(AZs, bucket_name):",
                "    file = s3.Object(bucket_name, 'regions.json')",
                "    try:",
                "      file.load()",
                "    except botocore.exceptions.ClientError as e:",
                "      if e.response['Error']['Code']:",
                "        file.put(Body=json.dumps(AZs))",
                "      else:",
                "        raise(e)",
                "",
                "    return json.loads(file.get()['Body'].read())",
                "",
                "def lambda_handler(event, context):",
                "  try:",
                "    AZs = event['ResourceProperties']['AZs']",
                "    bucket_name = event['ResourceProperties']['BucketName']",
                "    region = event['ResourceProperties']['Region']",
                "    log.info('Received event: ' + str(event))",
                "    log.info('AZs: ' + str(AZs))",
                "    log.info('bucket_name: ' + bucket_name)",
                "    log.info('region: ' + region)",
                "",
                "    available_zones = get_available_zones(AZs, bucket_name)",
                "    responseData = {}",
                "    responseData['0'] = available_zones[0]",
                "    responseData['1'] = available_zones[1]",
                "    try:",
                "      responseData['2'] = available_zones[2]",
                "    except:",
                "      pass",
                "    log.info('Responding with: ' + str(responseData))",
                "    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
                "  except Exception as e:",
                "    cfnresponse.send(event, context, cfnresponse.FAILED, {\"error\": str(e)}, \"CustomResourcePhysicalID\")"
              ]
            ]
          }
        },
        "Runtime": "python2.7",
        "Timeout": "10"
      }
    },
    "AvailableZones": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "GetAZFunction",
            "Arn"
          ]
        },
        "BucketName": "RegionBucket",
        "Region": "AWS::Region",
        "AZs": {
          "Fn::GetAZs": {
            "Ref": "AWS::Region"
          }
        }
      }
    },
    "RegionBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "LoggingConfiguration": {
          "LogFilePrefix": "logs/"
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 548,
              "Prefix": "logs/",
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "RegionBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "RegionBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "AccountId": {
      "Value": {
        "Ref": "AWS::AccountId"
      }
    },
    "ArtifactEncryptionKeyArn": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "arn:aws:kms:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":key/",
            {
              "Ref": "ArtifactEncryptionKey"
            }
          ]
        ]
      }
    },
    "AutoScalingGroupOneBox": {
      "Condition": "Prod",
      "Value": {
        "Ref": "AutoScalingGroupOneBox"
      }
    },
    "AutoScalingGroupName1": {
      "Value": {
        "Ref": "AutoScalingGroup1"
      }
    },
    "AutoScalingGroupName2": {
      "Value": {
        "Ref": "AutoScalingGroup2"
      }
    },
    "AutoScalingGroupName3": {
      "Condition": "MoreThan2AZs",
      "Value": {
        "Ref": "AutoScalingGroup3"
      }
    },
    "CloudWatchCPUHighAlarm": {
      "Value": {
        "Ref": "CPUHighAlarm"
      }
    },
    "CloudWatchMemoryUsageHighAlarm": {
      "Value": {
        "Ref": "MemoryUsageHighAlarm"
      }
    },
    "CloudWatchDiskSpaceUsageHighAlarm": {
      "Value": {
        "Ref": "DiskSpaceUsageHighAlarm"
      }
    },
    "CloudWatchDiskSpaceUsageHighTrendAlarm": {
      "Value": {
        "Ref": "DiskSpaceUsageHighTrendAlarm"
      }
    },
    "CloudWatchDiskOperationsHighAlarm": {
      "Value": {
        "Ref": "DiskOperationsHighAlarm"
      }
    },
    "CloudWatchDiskInodesUsageHighAlarm": {
      "Value": {
        "Ref": "DiskInodesUsageHighAlarm"
      }
    },
    "CloudWatchNumberOfProcessesHighAlarm": {
      "Value": {
        "Ref": "NumberOfProcessesHighAlarm"
      }
    },
    "BATSLogGroup": {
      "Value": {
        "Ref": "BATSLogGroup"
      }
    },
    "CloudWatchHealthyHostsBehindELBAlarm": {
      "Value": {
        "Ref": "HealthyHostsBehindELBAlarm"
      }
    },
    "CloudWatchProcessExitedInRunningStateAlarm": {
      "Value": {
        "Ref": "ProcessExitedInRunningStateAlarm"
      }
    },
    "CloudWatchMultipleProcessesExitedInRunningStateAlarm": {
      "Value": {
        "Ref": "MultipleProcessesExitedInRunningStateAlarm"
      }
    },
    "CloudWatchELBTargetResponseTimeAlarm": {
      "Value": {
        "Ref": "ELBTargetResponseTimeAlarm"
      }
    },
    "CloudWatchELBHTTPCodeTarget5XXWarning": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget5XXWarning"
      }
    },
    "CloudWatchELBHTTPCodeTarget5XXAlarm": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget5XXAlarm"
      }
    },
    "CloudWatchELBHTTPCodeTarget4XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget4XXCountAlarm"
      }
    },
    "CloudWatchELBHTTPCodeTarget3XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget3XXCountAlarm"
      }
    },
    "CloudWatchELBHTTPCode5XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCode5XXCountAlarm"
      }
    },
    "CloudWatchELBHTTPCode4XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCode4XXCountAlarm"
      }
    },
    "CloudWatchAutoScalingGroup1LimitsAlarm": {
      "Value": "AutoScalingGroup1LimitsAlarm"
    },
    "CloudWatchAutoScalingGroup2LimitsAlarm": {
      "Value": "AutoScalingGroup2LimitsAlarm"
    },
    "CloudWatchAutoScalingGroup3LimitsAlarm": {
      "Condition": "MoreThan2AZs",
      "Value": "AutoScalingGroup3LimitsAlarm"
    },
    "CloudWatchMissingCloudWatchApplicationLogsAlarm": {
      "Value": "MissingCloudWatchApplicationLogsAlarm"
    },
    "CloudWatchMissingCloudWatchServiceLogsAlarm": {
      "Value": "MissingCloudWatchServiceLogsAlarm"
    },
    "CloudWatchMissingCloudWatchCoralApplicationLogsAlarm": {
      "Value": "MissingCloudWatchCoralApplicationLogsAlarm"
    },
    "CloudWatchMissingCloudWatchCoralServiceLogsAlarm": {
      "Value": "MissingCloudWatchCoralServiceLogsAlarm"
    },
    "CodeDeployApplication": {
      "Value": {
        "Ref": "CodeDeployApp"
      }
    },
    "CodeDeployDeploymentGroupOneBox": {
      "Condition": "Prod",
      "Value": {
        "Ref": "OneBoxDeploymentGroup"
      }
    },
    "CodeDeployDeploymentGroup1": {
      "Value": {
        "Ref": "DeploymentGroup1"
      }
    },
    "CodeDeployDeploymentGroup2": {
      "Value": {
        "Ref": "DeploymentGroup2"
      }
    },
    "CodeDeployDeploymentGroup3": {
      "Condition": "MoreThan2AZs",
      "Value": {
        "Ref": "DeploymentGroup3"
      }
    },
    "DeploymentBucket": {
      "Value": {
        "Ref": "DeploymentBucket"
      }
    },
    "ExternalLoadBalancerDNSName": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "dualstack.",
            {
              "Fn::GetAtt": [
                "ELB",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "ExternalLoadBalancerHostedZoneId": {
      "Value": {
        "Fn::GetAtt": [
          "ELB",
          "CanonicalHostedZoneID"
        ]
      }
    },
    "InvokerSecurityGroup": {
      "Value": {
        "Ref": "InvokerSecurityGroup"
      }
    },
    "PipelinesBARSRole": {
      "Value": {
        "Fn::GetAtt": [
          "PipelinesBARSRole",
          "Arn"
        ]
      }
    },
    "PipelinesBATSRole": {
      "Value": {
        "Fn::GetAtt": [
          "PipelinesBATSRole",
          "Arn"
        ]
      }
    },
    "PipelinesCDBatsReadArtifactsRole": {
      "Value": {
        "Fn::GetAtt": [
          "PipelinesCDBatsReadArtifactsRole",
          "Arn"
        ]
      }
    },
    "PipelinesCodeDeployRole": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":role/",
            {
              "Ref": "PipelinesCodeDeployRole"
            }
          ]
        ]
      }
    },
    "RoleInstanceProfile": {
      "Value": {
        "Ref": "RoleInstanceProfile"
      }
    }
  }
}