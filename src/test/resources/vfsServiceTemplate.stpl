{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Service Specific Stack",
  "Parameters": {
    "ASGHealthCheckType": {
      "Default": "EC2",
      "Type": "String"
    },
    "PreProdASGMaxCapacity": {
      "Default": "5",
      "Type": "Number"
    },
    "PreProdASGAlarmThreshold": {
      "Default": "5",
      "Type": "Number",
      "Description": "The threshold at which we alarm on the asg reaching"
    },
    "PreProdASGMinCapacity": {
      "Default": "3",
      "Type": "Number"
    },
    "PreProdHealthyHostsBehindELBThreshold": {
      "Default": "6",
      "Type": "Number"
    },
    "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg": {
      "Default": "1",
      "Type": "Number"
    },
    "ProdASGMinCapacity": {
      "Default": "7",
      "Type": "Number"
    },
    "ProdASGMaxCapacity": {
      "Default": "30",
      "Type": "Number"
    },
    "ProdMinHealthyHosts2AZ": {
      "Default": "12",
      "Type": "Number"
    },
    "ProdMinHealthyHosts3AZ": {
      "Default": "18",
      "Type": "Number"
    },
    "BastionSecurityGroupId": {
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "CPUAlarmHighThreshold": {
      "Default": "70",
      "Type": "Number"
    },
    "CPUAlarmLowThreshold": {
      "Default": "30",
      "Type": "Number"
    },
    "DefaultSubnet": {
      "AllowedValues": [
        "public",
        "private"
      ],
      "Default": "private",
      "Description": "Default subnet type, either public or private. Public means publicly-addressable IPv4, private requires a NAT for internet access. Not that is this is set to 'public', but default *all* instances will be open to the internet.",
      "Type": "String"
    },
    "DomainName": {
      "Description": "The domain name to use for the SSL certificate. Requires pre-existing whitelisting of the domain with ACM. Format is the same as used in the DNS stack, e.g. not including workspace-api",
      "Type": "String"
    },
    "FACBucketARN": {
      "Description": "The FAC bucket ARN",
      "Type": "String"
    },
    "HealthCheckPath": {
      "Default": "/ping",
      "Type": "String"
    },
    "Hostclass": {
      "Description": "Hostclass for SPIE",
      "Type": "String"
    },
    "InstanceType": {
      "Default": "m4.xlarge",
      "Type": "String"
    },
    "KeyName": {
      "ConstraintDescription": "Must be a valid existing EC2 KeyPair.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "LBExternalPort": {
      "Default": "443",
      "Type": "Number"
    },
    "LBInstancePort": {
      "Description": "The port the backend service itself listens on the EC2 instances",
      "Default": "8080",
      "Type": "Number"
    },
    "LBInstanceProtocol": {
      "Description": "The protocol to talk to the backend service (e.g. HTTP, HTTPS, etc)",
      "Default": "HTTP",
      "Type": "String"
    },
    "PipelineID": {
      "Description": "The ID of the Pipeline you're adding CodeDeploy to (find the Pipeline ID under the edit tab of your Pipeline).",
      "Type": "String"
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet3": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet3": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Stage": {
      "Default": "",
      "Type": "String"
    },
    "VPC": {
      "ConstraintDescription": "must exist",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VpcCidrBlock": {
      "Description": "CidrBlock for the IP spaaaaaace for the the VPC",
      "Type": "String"
    },
    "WorkspaceKMSDelegationRole": {
      "Description": "The role used by the workspace service on the keys account to access KMS keys",
      "Type": "String"
    },
    "KMSAccountId": {
      "Description": "The ID of the AWS account owning the service KMS key",
      "Type": "String"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMI": "ami-6236f51f",
        "ASGAlarmThreshold": "20",
        "AutoScalingRollingUpdateMaxBatchSizePerAsg": "3",
        "ELBLogAccount": "127311923021"
      },
    }
  },
  "Conditions": {
    "Prod": {
      "Fn::Equals": [
        {
          "Ref": "Stage"
        },
        "prod"
      ]
    },
    "MoreThan2AZs": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "eu-west-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "ap-southeast-2"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-east-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-east-2"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-2"
          ]
        }
      ]
    },
    "UsePublicSubnet": {
      "Fn::Equals": [
        "public",
        {
          "Ref": "DefaultSubnet"
        }
      ]
    }
  },
  "Resources": {
    "SDKMetricsRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "Prod",
      "Properties": {
        "RoleName": "sdk-cwl-export-${AWS::AccountId}",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "998293646659"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "sdk-cwl-export-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateExportTask"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:${AWS::AccountId}:log-group:AWSCloud9WorkspaceManagementService/service_log:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:DescribeExportTasks",
                    "logs:DescribeDestinations"
                  ],
                  "Resource": "arn:aws:logs:*:${AWS::AccountId}:log-group:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    "SDKMetricsBucket.Arn",
                    "arn:aws:s3:::aws-dr-metrics-cwl"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "${SDKMetricsBucket.Arn}/*",
                    "arn:aws:s3:::aws-dr-metrics-cwl/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObjectAcl"
                  ],
                  "Resource": [
                    "arn:aws:s3:::aws-dr-metrics-cwl/*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "SDKMetricsBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "Prod",
      "Properties": {
        "AccessControl": "Private",
        "BucketName": "cloud9-sdk-cwl-export-logs-${AWS::Region}"
      }
    },
    "SDKMetricsBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "Prod",
      "Properties": {
        "Bucket": "SDKMetricsBucket",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "logs.${AWS::Region}.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": "SDKMetricsBucket.Arn"
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "logs.${AWS::Region}.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": "${SDKMetricsBucket.Arn}/*",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "ArtifactEncryptionKey": {
      "Properties": {
        "Description": "For server side artifact encryption",
        "EnableKeyRotation": "true",
        "Enabled": "true",
        "KeyPolicy": {
          "Id": "key-default-1",
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*",
              "Sid": "Enable IAM User Permissions"
            },
            {
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*",
              "Sid": "Allow access for Key Administrators"
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "PipelinesBATSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "PipelinesBARSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "InstanceRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Resource": "*",
              "Sid": "Allow use of the key"
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RevokeGrant"
              ],
              "Condition": {
                "Bool": {
                  "kms:GrantIsForAWSResource": "true"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "PipelinesBATSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "PipelinesBARSRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "InstanceRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Resource": "*",
              "Sid": "Allow attachment of persistent resources"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::KMS::Key"
    },
    "AutoScalingGroupOneBox": {
      "Condition": "Prod",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Used for onebox deploys"
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "0"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": 1,
        "MinSize": 1,
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group OneBox"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet1"
              },
              {
                "Ref": "PrivateSubnet1"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 1,
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "AutoScalingGroup1": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Scaling policies will be set a later date."
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "0"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMaxCapacity"
            },
            {
              "Ref": "PreProdASGMaxCapacity"
            }
          ]
        },
        "MinSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMinCapacity"
            },
            {
              "Ref": "PreProdASGMinCapacity"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group 1"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "false"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet1"
              },
              {
                "Ref": "PrivateSubnet1"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": {
            "Fn::If": [
              "Prod",
              {
                "Fn::FindInMap": [
                  "RegionMap",
                  {
                    "Ref": "AWS::Region"
                  },
                  "AutoScalingRollingUpdateMaxBatchSizePerAsg"
                ]
              },
              {
                "Ref": "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg"
              }
            ]
          },
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "AutoScalingGroup2": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Scaling policies will be set a later date."
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "1"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMaxCapacity"
            },
            {
              "Ref": "PreProdASGMaxCapacity"
            }
          ]
        },
        "MinSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMinCapacity"
            },
            {
              "Ref": "PreProdASGMinCapacity"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group 2"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "false"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet2"
              },
              {
                "Ref": "PrivateSubnet2"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": {
            "Fn::If": [
              "Prod",
              {
                "Fn::FindInMap": [
                  "RegionMap",
                  {
                    "Ref": "AWS::Region"
                  },
                  "AutoScalingRollingUpdateMaxBatchSizePerAsg"
                ]
              },
              {
                "Ref": "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg"
              }
            ]
          },
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "AutoScalingGroup3": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Condition": "MoreThan2AZs",
      "Metadata": {
        "Comment": "AutoScalingGroup configured with the template-defined launch config and ELB. Scaling policies will be set a later date."
      },
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "AvailableZones",
              "2"
            ]
          }
        ],
        "HealthCheckGracePeriod": 90,
        "HealthCheckType": {
          "Ref": "ASGHealthCheckType"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ELBTargetGroup"
          }
        ],
        "MaxSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMaxCapacity"
            },
            {
              "Ref": "PreProdASGMaxCapacity"
            }
          ]
        },
        "MinSize": {
          "Fn::If": [
            "Prod",
            {
              "Ref": "ProdASGMinCapacity"
            },
            {
              "Ref": "PreProdASGMinCapacity"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Group 3"
                ]
              ]
            }
          },
          {
            "Key": "singlepass-ec2-client-hostclass",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Hostclass"
            }
          },
          {
            "Key": "onebox",
            "PropagateAtLaunch": "true",
            "Value": "false"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UsePublicSubnet",
              {
                "Ref": "PublicSubnet3"
              },
              {
                "Ref": "PrivateSubnet3"
              }
            ]
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": {
            "Fn::If": [
              "Prod",
              {
                "Fn::FindInMap": [
                  "RegionMap",
                  {
                    "Ref": "AWS::Region"
                  },
                  "AutoScalingRollingUpdateMaxBatchSizePerAsg"
                ]
              },
              {
                "Ref": "PreProdAutoScalingRollingUpdateMaxBatchSizePerAsg"
              }
            ]
          },
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT30M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "CPUHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM CPU High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "CPUUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "80",
        "AlarmDescription": "Alarm if CPU too high on any EC2 instance",
        "Period": "60",
        "Namespace": "AWS/EC2"
      }
    },
    "MemoryUsageHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Memory Usage High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "MemoryUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "80",
        "AlarmDescription": "Alarm if memory usage is too high on any EC2 instance",
        "Period": "60",
        "Namespace": "System/Linux"
      }
    },
    "DiskSpaceUsageHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Space Usage High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "DiskSpaceUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "70",
        "AlarmDescription": "Alarm if disk space usage is high on any EC2 instance, but before it's critical",
        "Period": "60",
        "Namespace": "System/Linux",
        "Dimensions": [
          {
            "Name": "Filesystem",
            "Value": "/dev/xvda1"
          },
          {
            "Name": "MountPath",
            "Value": "/"
          }
        ]
      }
    },
    "DiskSpaceUsageHighTrendAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Space Usage High Trend",
        "EvaluationPeriods": "10",
        "Statistic": "Average",
        "MetricName": "DiskSpaceUtilization",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "50",
        "AlarmDescription": "Alarm if disk space usage is going up on all EC2 instances",
        "Period": "60",
        "Namespace": "System/Linux",
        "Dimensions": [
          {
            "Name": "Filesystem",
            "Value": "/dev/xvda1"
          },
          {
            "Name": "MountPath",
            "Value": "/"
          }
        ]
      }
    },
    "DiskOperationsHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Operations High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "disk.disk_ops",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "800000",
        "AlarmDescription": "Alarm if disk operations usage is high on any EC2 instance",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "PluginInstance",
            "Value": "xvda1"
          },
          {
            "Name": "FixedDimension",
            "Value": "ALL"
          }
        ]
      }
    },
    "DiskInodesUsageHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Disk Inodes Usage High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "df.percent_inodes.used",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "50",
        "AlarmDescription": "Alarm if disk inodes usage is high on any EC2 instance",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "PluginInstance",
            "Value": "xvda1"
          },
          {
            "Name": "FixedDimension",
            "Value": "ALL"
          }
        ]
      }
    },
    "NumberOfProcessesHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Number Of Processes High",
        "EvaluationPeriods": "10",
        "Statistic": "Maximum",
        "MetricName": "processes.ps_state.sleeping",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "420",
        "AlarmDescription": "Alarm if there is a high number of processes on any EC2 instance",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "PluginInstance",
            "Value": "NONE"
          },
          {
            "Name": "FixedDimension",
            "Value": "ALL"
          }
        ]
      }
    },
    "AutoScalingGroup1LimitsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Number of instances in ASG 1 is approaching the scaling maximum",
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "MetricName": "GroupTotalInstances",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Threshold": {
          "Fn::If": [
            "Prod",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "ASGAlarmThreshold"
              ]
            },
            {
              "Ref": "PreProdASGAlarmThreshold"
            }
          ]
        },
        "AlarmDescription": "Alarm if the number of instances in ASG 1 is approaching the scaling maximum",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AutoScalingGroup1"
          }
        ]
      }
    },
    "AutoScalingGroup2LimitsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Number of instances in ASG 2 is approaching the scaling maximum",
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "MetricName": "GroupTotalInstances",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Threshold": {
          "Fn::If": [
            "Prod",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "ASGAlarmThreshold"
              ]
            },
            {
              "Ref": "PreProdASGAlarmThreshold"
            }
          ]
        },
        "AlarmDescription": "Alarm if the number of instances in ASG 2 is approaching the scaling maximum",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AutoScalingGroup2"
          }
        ]
      }
    },
    "AutoScalingGroup3LimitsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "MoreThan2AZs",
      "Properties": {
        "AlarmName": "C9ALARM Number of instances in ASG 3 is approaching the scaling maximum",
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "MetricName": "GroupTotalInstances",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Threshold": {
          "Fn::If": [
            "Prod",
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "ASGAlarmThreshold"
              ]
            },
            {
              "Ref": "PreProdASGAlarmThreshold"
            }
          ]
        },
        "AlarmDescription": "Alarm if the number of instances in ASG 3 is approaching the scaling maximum",
        "Period": "60",
        "Namespace": "collectd",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AutoScalingGroup3"
          }
        ]
      }
    },
    "BATSLogGroup": {
      "Properties": {
        "RetentionInDays": 7
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "ProcessManagerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "AWSCloud9WorkspaceManagementService/processmanager.log"
      }
    },
    "ProcessExitedInRunningStateMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterPattern": "\"received exit notification\" \"state (2)\"",
        "LogGroupName": {
          "Ref": "ProcessManagerLogGroup"
        },
        "MetricTransformations": [
          {
            "MetricValue": 1,
            "MetricNamespace": "AWSCloud9WorkspaceManagementService",
            "MetricName": "ProcessExitedInRunningState"
          }
        ]
      }
    },
    "ProcessExitedInRunningStateAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Process Exited In Running State",
        "AlarmDescription": "Service process (node.js) managed by processmanager died unexpectedly",
        "Namespace": "AWSCloud9WorkspaceManagementService",
        "Statistic": "Sum",
        "MetricName": "ProcessExitedInRunningState",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "Period": 60,
        "EvaluationPeriods": 1,
        "TreatMissingData": "notBreaching"
      }
    },
    "MultipleProcessesExitedInRunningStateAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "C9ALARM Multiple Processes Exited In Running State",
        "AlarmDescription": "Multiple instances of a service process (node.js) managed by processmanager died unexpectedly",
        "Namespace": "AWSCloud9WorkspaceManagementService",
        "Statistic": "Sum",
        "MetricName": "ProcessExitedInRunningState",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 3,
        "TreatMissingData": "notBreaching",
        "Period": 60,
        "EvaluationPeriods": 2
      }
    },
    "MissingCloudWatchApplicationLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchApplicationLogsAlarm",
        "AlarmDescription": "Cloudwatch application logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/application.log"
          }
        ]
      }
    },
    "MissingCloudWatchCoralApplicationLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchCoralApplicationLogsAlarm",
        "AlarmDescription": "Cloudwatch application logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/coral_application.log"
          }
        ]
      }
    },
    "MissingCloudWatchServiceLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchServiceLogsAlarm",
        "AlarmDescription": "Cloudwatch service logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/service_log"
          }
        ]
      }
    },
    "MissingCloudWatchCoralServiceLogsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "MissingCloudWatchCoralServiceLogsAlarm",
        "AlarmDescription": "Cloudwatch service logs are no longer being pulled in",
        "Namespace": "AWS/Logs",
        "Statistic": "Sum",
        "MetricName": "IncomingLogEvents",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": 10,
        "TreatMissingData": "breaching",
        "Period": 60,
        "EvaluationPeriods": 10,
        "Dimensions": [
          {
            "Name": "LogGroupName",
            "Value": "AWSCloud9WorkspaceManagementService/coral_service_log"
          }
        ]
      }
    },
    "CodeDeployApp": {
      "Type": "AWS::CodeDeploy::Application"
    },
    "CodeDeployRole": {
      "Metadata": {
        "Comment": "Role used by CodeDeploy to actually deploy software"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "codedeploy.",
                        {
                          "Ref": "AWS::Region"
                        },
                        ".amazonaws.com"
                      ]
                    ]
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/codeDeployRole/"
      },
      "Type": "AWS::IAM::Role"
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "RegionBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "RegionBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "AccountId": {
      "Value": {
        "Ref": "AWS::AccountId"
      }
    },
    "ArtifactEncryptionKeyArn": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "arn:aws:kms:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":key/",
            {
              "Ref": "ArtifactEncryptionKey"
            }
          ]
        ]
      }
    },
    "AutoScalingGroupOneBox": {
      "Condition": "Prod",
      "Value": {
        "Ref": "AutoScalingGroupOneBox"
      }
    },
    "AutoScalingGroupName1": {
      "Value": {
        "Ref": "AutoScalingGroup1"
      }
    },
    "AutoScalingGroupName2": {
      "Value": {
        "Ref": "AutoScalingGroup2"
      }
    },
    "AutoScalingGroupName3": {
      "Condition": "MoreThan2AZs",
      "Value": {
        "Ref": "AutoScalingGroup3"
      }
    },
    "CloudWatchCPUHighAlarm": {
      "Value": {
        "Ref": "CPUHighAlarm"
      }
    },
    "CloudWatchMemoryUsageHighAlarm": {
      "Value": {
        "Ref": "MemoryUsageHighAlarm"
      }
    },
    "CloudWatchDiskSpaceUsageHighAlarm": {
      "Value": {
        "Ref": "DiskSpaceUsageHighAlarm"
      }
    },
    "CloudWatchDiskSpaceUsageHighTrendAlarm": {
      "Value": {
        "Ref": "DiskSpaceUsageHighTrendAlarm"
      }
    },
    "CloudWatchDiskOperationsHighAlarm": {
      "Value": {
        "Ref": "DiskOperationsHighAlarm"
      }
    },
    "CloudWatchDiskInodesUsageHighAlarm": {
      "Value": {
        "Ref": "DiskInodesUsageHighAlarm"
      }
    },
    "CloudWatchNumberOfProcessesHighAlarm": {
      "Value": {
        "Ref": "NumberOfProcessesHighAlarm"
      }
    },
    "BATSLogGroup": {
      "Value": {
        "Ref": "BATSLogGroup"
      }
    },
    "CloudWatchHealthyHostsBehindELBAlarm": {
      "Value": {
        "Ref": "HealthyHostsBehindELBAlarm"
      }
    },
    "CloudWatchProcessExitedInRunningStateAlarm": {
      "Value": {
        "Ref": "ProcessExitedInRunningStateAlarm"
      }
    },
    "CloudWatchMultipleProcessesExitedInRunningStateAlarm": {
      "Value": {
        "Ref": "MultipleProcessesExitedInRunningStateAlarm"
      }
    },
    "CloudWatchELBTargetResponseTimeAlarm": {
      "Value": {
        "Ref": "ELBTargetResponseTimeAlarm"
      }
    },
    "CloudWatchELBHTTPCodeTarget5XXWarning": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget5XXWarning"
      }
    },
    "CloudWatchELBHTTPCodeTarget5XXAlarm": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget5XXAlarm"
      }
    },
    "CloudWatchELBHTTPCodeTarget4XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget4XXCountAlarm"
      }
    },
    "CloudWatchELBHTTPCodeTarget3XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCodeTarget3XXCountAlarm"
      }
    },
    "CloudWatchELBHTTPCode5XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCode5XXCountAlarm"
      }
    },
    "CloudWatchELBHTTPCode4XXCountAlarm": {
      "Value": {
        "Ref": "ELBHTTPCode4XXCountAlarm"
      }
    },
    "CloudWatchAutoScalingGroup1LimitsAlarm": {
      "Value": "AutoScalingGroup1LimitsAlarm"
    },
    "CloudWatchAutoScalingGroup2LimitsAlarm": {
      "Value": "AutoScalingGroup2LimitsAlarm"
    },
    "CloudWatchAutoScalingGroup3LimitsAlarm": {
      "Condition": "MoreThan2AZs",
      "Value": "AutoScalingGroup3LimitsAlarm"
    },
    "CloudWatchMissingCloudWatchApplicationLogsAlarm": {
      "Value": "MissingCloudWatchApplicationLogsAlarm"
    },
    "CloudWatchMissingCloudWatchServiceLogsAlarm": {
      "Value": "MissingCloudWatchServiceLogsAlarm"
    },
    "CloudWatchMissingCloudWatchCoralApplicationLogsAlarm": {
      "Value": "MissingCloudWatchCoralApplicationLogsAlarm"
    },
    "CloudWatchMissingCloudWatchCoralServiceLogsAlarm": {
      "Value": "MissingCloudWatchCoralServiceLogsAlarm"
    },
    "CodeDeployApplication": {
      "Value": {
        "Ref": "CodeDeployApp"
      }
    },
    "CodeDeployDeploymentGroupOneBox": {
      "Condition": "Prod",
      "Value": {
        "Ref": "OneBoxDeploymentGroup"
      }
    },
    "CodeDeployDeploymentGroup1": {
      "Value": {
        "Ref": "DeploymentGroup1"
      }
    },
    "CodeDeployDeploymentGroup2": {
      "Value": {
        "Ref": "DeploymentGroup2"
      }
    },
    "CodeDeployDeploymentGroup3": {
      "Condition": "MoreThan2AZs",
      "Value": {
        "Ref": "DeploymentGroup3"
      }
    },
    "DeploymentBucket": {
      "Value": {
        "Ref": "DeploymentBucket"
      }
    },
    "ExternalLoadBalancerDNSName": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "dualstack.",
            {
              "Fn::GetAtt": [
                "ELB",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "ExternalLoadBalancerHostedZoneId": {
      "Value": {
        "Fn::GetAtt": [
          "ELB",
          "CanonicalHostedZoneID"
        ]
      }
    },
    "InvokerSecurityGroup": {
      "Value": {
        "Ref": "InvokerSecurityGroup"
      }
    },
    "PipelinesBARSRole": {
      "Value": {
        "Fn::GetAtt": [
          "PipelinesBARSRole",
          "Arn"
        ]
      }
    },
    "PipelinesBATSRole": {
      "Value": {
        "Fn::GetAtt": [
          "PipelinesBATSRole",
          "Arn"
        ]
      }
    },
    "PipelinesCDBatsReadArtifactsRole": {
      "Value": {
        "Fn::GetAtt": [
          "PipelinesCDBatsReadArtifactsRole",
          "Arn"
        ]
      }
    },
    "PipelinesCodeDeployRole": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":role/",
            {
              "Ref": "PipelinesCodeDeployRole"
            }
          ]
        ]
      }
    },
    "RoleInstanceProfile": {
      "Value": {
        "Ref": "RoleInstanceProfile"
      }
    }
  }
}